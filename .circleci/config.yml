# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details

version: 2.1

orbs:
  ruby: circleci/ruby@2.0.0
  browser-tools: circleci/browser-tools@1.4.8
  nodejs: circleci/node@5.1.1
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-eks: circleci/aws-eks@1.1.0
  aws-cli: circleci/aws-cli@3.1.4
  kubernetes: circleci/kubernetes@1.3.1
  docker: circleci/docker@1.5.0

executors:
  test_executor:
    parameters:
      ruby_version:
        type: string
      elasticsearch_version:
        type: string
      mysql_version:
        type: string

    working_directory: ~/search-gov

    docker:
      - image: cimg/ruby:<< parameters.ruby_version >>
        environment:
          RAILS_ENV: test

      - image: cimg/mysql:<< parameters.mysql_version >>
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_HOST: "%"

      - image: redis:6.2

      - image: docker.elastic.co/elasticsearch/elasticsearch:<< parameters.elasticsearch_version >>
        environment:
          bootstrap.memory_lock: true
          cluster.name: es_<< parameters.elasticsearch_version >>
          discovery.type: single-node
          http.port: 9200
          xpack.license.self_generated.type: trial
          xpack.monitoring.enabled: false
          xpack.security.enabled: false
          ES_JAVA_OPTS: '-Xms256m -Xmx256m'

      - image: apache/tika:2.4.1

commands:
  install_chrome:
    description: 'Install latest Chrome and ChromeDriver'
    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check install
  install_js_dependencies:
    description: 'Install JavaScript dependencies'
    steps:
      - run:
          name: Clean node_modules
          command: rm -rf node_modules
      - nodejs/install:
          node-version: '16'
          install-yarn: true
      - run:
          name: Yarn Install
          command: yarn install --frozen-lockfile
  precompile_assets:
    description: 'Pre-compile assets'
    steps:
      - run: bin/rails assets:precompile
  prepare_database:
    description: 'Prepare the test database'
    steps:
      - run: bundle exec rake db:setup

jobs:
  checkout_code:
    parameters:
      ruby_version:
        type: string
      elasticsearch_version:
        type: string
      mysql_version:
        type: string

    executor:
      name: test_executor
      ruby_version: << parameters.ruby_version >>
      elasticsearch_version: << parameters.elasticsearch_version >>
      mysql_version: << parameters.mysql_version >>

    steps:
      - checkout

      - run:
          name: Wait for Elasticsearch
          command: dockerize -wait tcp://localhost:9200 -timeout 1m

      - run:
          name: Use developer secrets
          command: |
            mv config/secrets.yml.dev config/secrets.yml

      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - save_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/search-gov

  rspec:
    parameters:
      ruby_version:
        type: string
      elasticsearch_version:
        type: string
      mysql_version:
        type: string

    executor:
      name: test_executor
      ruby_version: << parameters.ruby_version >>
      elasticsearch_version: << parameters.elasticsearch_version >>
      mysql_version: << parameters.mysql_version >>

    parallelism: 6

    steps:
      - setup_remote_docker  # Added here
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}

      - ruby/install-deps:
          key: gems-ruby-<< parameters.ruby_version >>-v{{ .Environment.CACHE_VERSION }}

      - run:
          name: Install Ruby Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y default-mysql-client libprotobuf-dev protobuf-compiler

      - install_js_dependencies

      - install_chrome

      - prepare_database

      - precompile_assets

      - run:
          name: Wait for Elasticsearch
          command: dockerize -wait tcp://localhost:9200 -timeout 1m

      - run:
          name: Install Elasticsearch Plugins
          command: |
            until curl -sS localhost:9200; do sleep 1; done
            elasticsearch_container_id=$(docker ps -qf "ancestor=docker.elastic.co/elasticsearch/elasticsearch:<< parameters.elasticsearch_version >>")
            docker exec $elasticsearch_container_id elasticsearch-plugin install analysis-kuromoji
            docker exec $elasticsearch_container_id elasticsearch-plugin install analysis-icu
            docker exec $elasticsearch_container_id elasticsearch-plugin install analysis-smartcn

      - run:
          name: Run Tests
          command: |
            bundle exec rake usasearch:elasticsearch:create_indexes

            mkdir /tmp/test-results
            ./cc-test-reporter before-build

            bundle exec rspec --format progress \
                              --format RspecJunitFormatter \
                              --out /tmp/test-results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

            ./cc-test-reporter format-coverage \
              --output coverage/codeclimate.rspec.$CIRCLE_NODE_INDEX.<< parameters.ruby_version >>_<< parameters.elasticsearch_version >>_<< parameters.mysql_version >>.json

      - persist_to_workspace:
          root: ~/search-gov/coverage
          paths:
            - codeclimate.rspec.*.json

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  cucumber:
    parameters:
      ruby_version:
        type: string
      elasticsearch_version:
        type: string
      mysql_version:
        type: string

    executor:
      name: test_executor
      ruby_version: << parameters.ruby_version >>
      elasticsearch_version: << parameters.elasticsearch_version >>
      mysql_version: << parameters.mysql_version >>

    parallelism: 10

    steps:
      - setup_remote_docker  # Added here
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}

      - ruby/install-deps:
          key: gems-ruby-<< parameters.ruby_version >>-v{{ .Environment.CACHE_VERSION }}

      - install_js_dependencies

      - install_chrome

      - run:
          name: Install Ruby Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y default-mysql-client libprotobuf-dev protobuf-compiler

      - prepare_database

      - precompile_assets

      - run:
          name: Wait for Elasticsearch
          command: dockerize -wait tcp://localhost:9200 -timeout 1m

      - run:
          name: Install Elasticsearch Plugins
          command: |
            until curl -sS localhost:9200; do sleep 1; done
            elasticsearch_container_id=$(docker ps -qf "ancestor=docker.elastic.co/elasticsearch/elasticsearch:<< parameters.elasticsearch_version >>")
            docker exec $elasticsearch_container_id elasticsearch-plugin install analysis-kuromoji
            docker exec $elasticsearch_container_id elasticsearch-plugin install analysis-icu
            docker exec $elasticsearch_container_id elasticsearch-plugin install analysis-smartcn

      - run:
          name: Run Tests
          command: |
            bundle exec rake usasearch:elasticsearch:create_indexes

            bundle exec rake tmp:create

            mkdir /tmp/test-results
            ./cc-test-reporter before-build

            bundle exec cucumber --format progress \
                                --format junit \
                                --out /tmp/test-results/cucumber.xml \
                                --format progress \
                                -- $(circleci tests glob "features/*.feature" | circleci tests split --split-by=timings)

            ./cc-test-reporter format-coverage \
              --output coverage/codeclimate.cucumber.$CIRCLE_NODE_INDEX.<< parameters.ruby_version >>_<< parameters.elasticsearch_version >>_<< parameters.mysql_version >>.json

      - persist_to_workspace:
          root: ~/search-gov/coverage
          paths:
            - codeclimate.cucumber.*.json

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  jest:
    parameters:
      node_version:
        type: string
      ruby_version:
        type: string
      elasticsearch_version:
        type: string
      mysql_version:
        type: string

    executor:
      name: test_executor
      ruby_version: << parameters.ruby_version >>
      elasticsearch_version: << parameters.elasticsearch_version >>
      mysql_version: << parameters.mysql_version >>

    steps:
      - setup_remote_docker  # Added here
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}

      - nodejs/install:
          install-yarn: true
          node-version: << parameters.node_version >>

      - install_js_dependencies

      - run:
          name: Run Tests
          command: |
            ./cc-test-reporter before-build

            yarn test:coverage

            ./cc-test-reporter format-coverage \
              --output coverage/codeclimate.jest.$CIRCLE_NODE_INDEX.<< parameters.node_version >>_<< parameters.ruby_version >>_<< parameters.mysql_version >>.json

      - persist_to_workspace:
          root: ~/search-gov/coverage
          paths:
            - codeclimate.jest.*.json

  report_coverage:
    parameters:
      ruby_version:
        type: string
      elasticsearch_version:
        type: string
      mysql_version:
        type: string

    executor:
      name: test_executor
      ruby_version: << parameters.ruby_version >>
      elasticsearch_version: << parameters.elasticsearch_version >>
      mysql_version: << parameters.mysql_version >>

    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}

      - attach_workspace:
          at: ~/search-gov/coverage

      - run:
          name: Report coverage to Code Climate
          command: |
            ./cc-test-reporter sum-coverage \
              coverage/codeclimate.*.json \
              --output coverage/codeclimate_full_report.json

            ./cc-test-reporter upload-coverage --input coverage/codeclimate_full_report.json

            ruby scripts/check_coverage.rb ${PWD}/coverage/codeclimate_full_report.json

  update-staging:
    docker:
      - image: cimg/aws:2023.01
    resource_class: xlarge
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/setup:
          aws-region: STAGING_AWS_REGION
          aws-access-key-id: CIRCLE_CI_USER_ACCESS_KEY_ID
          aws-secret-access-key: CIRCLE_CI_USER_SECRET_ACCESS_KEY
      - run:
          name: build searchgov image
          command: |
            docker build --build-arg AWS_ACCESS_KEY_ID=${CIRCLE_CI_USER_ACCESS_KEY_ID} \
            --build-arg AWS_REGION=us-east-1 \
            --build-arg AWS_BUCKET=dgsearch-image \
            --build-arg AWS_SECRET_ACCESS_KEY=${CIRCLE_CI_USER_SECRET_ACCESS_KEY} \
            --build-arg ASSET_HOST=https://d2nlddtcvx68lt.cloudfront.net \
            -t searchgov .

      - run: docker tag searchgov:latest 213305845712.dkr.ecr.us-east-2.amazonaws.com/searchgov:latest
      - run: docker tag searchgov:latest 213305845712.dkr.ecr.us-east-2.amazonaws.com/searchgov:${CIRCLE_SHA1:0:7}
      - run: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 213305845712.dkr.ecr.us-east-2.amazonaws.com
      - run: docker push 213305845712.dkr.ecr.us-east-2.amazonaws.com/searchgov:latest
      - run: docker push 213305845712.dkr.ecr.us-east-2.amazonaws.com/searchgov:${CIRCLE_SHA1:0:7}
      - run:
          name: update searchgov k8s deployment
          command: |
            aws ssm send-command \
            --document-name "searchgov-deployment-ssm-document" \
            --targets "Key=tag:Name,Values=jumphost-staging-search-instance" \
            --parameters '{"DeploymentName":["search-staging-searchgov-deploy"], "Namespace":["search"]}' \
            --comment "restart searchgov staging deployment"

  update-prod:
    docker:
      - image: cimg/aws:2023.01
    resource_class: xlarge
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/setup:
          aws-region: PROD_AWS_REGION
          aws-access-key-id: CIRCLE_CI_USER_ACCESS_KEY_ID
          aws-secret-access-key: CIRCLE_CI_USER_SECRET_ACCESS_KEY
      - run:
          name: build searchgov image
          command: |
            docker build --build-arg AWS_ACCESS_KEY_ID=${CIRCLE_CI_USER_ACCESS_KEY_ID} \
            --build-arg AWS_REGION=us-east-1 \
            --build-arg AWS_BUCKET=dgsearch-images \
            --build-arg AWS_SECRET_ACCESS_KEY=${CIRCLE_CI_USER_SECRET_ACCESS_KEY} \
            --build-arg ASSET_HOST=https://d15vqlr7iz6e8x.cloudfront.net \
            -t searchgov .

      - run: docker tag searchgov:latest 213305845712.dkr.ecr.us-east-1.amazonaws.com/searchgov:latest
      - run: docker tag searchgov:latest 213305845712.dkr.ecr.us-east-1.amazonaws.com/searchgov:${CIRCLE_SHA1:0:7}
      - run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 213305845712.dkr.ecr.us-east-1.amazonaws.com
      - run: docker push 213305845712.dkr.ecr.us-east-1.amazonaws.com/searchgov:latest
      - run: docker push 213305845712.dkr.ecr.us-east-1.amazonaws.com/searchgov:${CIRCLE_SHA1:0:7}
      - run:
          name: update searchgov k8s deployment
          command: |
            aws ssm send-command \
            --document-name "searchgov-deployment-ssm-document" \
            --targets "Key=tag:Name,Values=jumphost-prod-search-instance" \
            --parameters '{"DeploymentName":["search-prod-searchgov-deploy"], "Namespace":["search"]}' \
            --comment "restart searchgov prod deployment"

workflows:
  version: 2
  build_and_test:
    jobs:
      - checkout_code:
          name: checkout_code
          matrix:
            alias: checkout_code_alias
            parameters:
              ruby_version:
                - 3.1.4
              elasticsearch_version:
                - 7.17.7
                # not yet compatible with Elasticsearch 8
              mysql_version:
                - "8.0"

      - rspec:
          requires:
            - checkout_code_alias
          name: rspec
          matrix:
            alias: rspec_alias
            parameters:
              ruby_version:
                - 3.1.4
              elasticsearch_version:
                - 7.17.7
              mysql_version:
                - "8.0"

      - cucumber:
          requires:
            - checkout_code_alias
          name: cucumber
          matrix:
            alias: cucumber_alias
            parameters:
              ruby_version:
                - 3.1.4
              elasticsearch_version:
                - 7.17.7
              mysql_version:
                - "8.0"

      - jest:
          requires:
            - checkout_code_alias
          name: jest
          matrix:
            alias: jest_alias
            parameters:
              node_version:
                - 16.20.2
              ruby_version:
                - 3.1.4
              elasticsearch_version:
                - 7.17.7
              mysql_version:
                - "8.0"

      - report_coverage:
          requires:
            - rspec_alias
            - cucumber_alias
            - jest_alias
          name: report_coverage
          matrix:
            alias: report_coverage_alias
            parameters:
              ruby_version:
                - 3.1.4
              elasticsearch_version:
                - 7.17.7
              mysql_version:
                - "8.0"

  build_image_and_deploy:
    jobs:
      - update-staging:
          context:
            - aws-client-keys
          filters:
            branches:
              only:
                - main
      - update-prod:
          context:
            - aws-client-keys
          filters:
            branches:
              only:
                - production